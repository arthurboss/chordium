#!/bin/bash

# Single responsibility: GitHub PR comment formatting
# Converts git-tree markdown to GitHub PR comment format

# Source logging utilities
source "$(dirname "${BASH_SOURCE[0]}")/../utils/logger.sh"

# Convert git-tree markdown to GitHub PR comment format
format_for_github_comment() {
    local git_tree_file="$1"
    local output_file="$2"
    
    log_info "Formatting git-tree output for GitHub comment"
    
    if [[ ! -f "$git_tree_file" ]]; then
        log_error "Git-tree file not found: $git_tree_file"
        exit 1
    fi
    
    # Source the GitHub markdown cleaner utility
    source "$(dirname "${BASH_SOURCE[0]}")/github_markdown_cleaner.sh"
    
    # Create temporary file for content processing
    local temp_content="$(mktemp)"
    
    # Extract content (skip filepath comment, preserve original git-tree header)
    tail -n +2 "$git_tree_file" | grep -v "^<!-- filepath:" > "$temp_content"
    
    # Create GitHub comment with proper markers
    {
        echo "<!-- AUTO-GENERATED FILE TREE -->"
        echo "<!-- This comment will be updated automatically by the GitHub Action -->"
        echo ""
        
        # Clean the content for GitHub rendering (removes <br> tags)
        clean_markdown_for_github_stdin < "$temp_content"
        
        echo ""
        echo "---"
        echo "_Generated by [git-tree script](./scripts/git-tree/) for PR #${PR_NUMBER}_"
        echo "_ðŸ¤– This comment is automatically updated when the PR changes_"
        echo ""
        echo "<!-- END AUTO-GENERATED FILE TREE -->"
        
    } > "$output_file"
    
    # Clean up temporary file
    rm -f "$temp_content"
    
    log_success "GitHub comment formatted and saved to: $output_file"
}
