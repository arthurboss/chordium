#!/bin/bash

# GitHub Action Adapter for Git Tree PR Comments
# 
# This script adapts our git-tree script for use in GitHub Actions.
# It handles the GitHub-specific environment setup and generates
# PR comments using our modern git-tree rendering logic.
#
# Dependencies: 
# - scripts/git-tree/index.sh (main git-tree script)
# - GitHub Action environment variables
#
# Environment Variables Required:
# - GITHUB_REPOSITORY: Repository in format "owner/repo"
# - PR_NUMBER: Pull request number
# - GITHUB_TOKEN: GitHub API token
# - GITHUB_HEAD_REF: PR head branch name
# - GITHUB_BASE_REF: PR base branch name

set -e  # Exit on error

# Color codes for logging
readonly CYAN='\033[0;36m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${CYAN}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Validate required environment variables
validate_environment() {
    local required_vars=("GITHUB_REPOSITORY" "PR_NUMBER" "GITHUB_TOKEN" "GITHUB_HEAD_REF" "GITHUB_BASE_REF")
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            missing_vars+=("$var")
        fi
    done
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "Missing required environment variables:"
        printf '  - %s\n' "${missing_vars[@]}"
        exit 1
    fi
    
    log_success "All required environment variables are present"
}

# Display environment information for debugging
show_environment_info() {
    log_info "GitHub Action Environment:"
    echo "  Repository: $GITHUB_REPOSITORY"
    echo "  PR Number: $PR_NUMBER"
    echo "  Head Branch: $GITHUB_HEAD_REF"
    echo "  Base Branch: $GITHUB_BASE_REF"
}

# Generate git-tree output using our modern scripts
generate_git_tree() {
    local base_branch="$1"
    local target_branch="$2"
    local output_file="$3"
    
    log_info "Generating git-tree for $target_branch vs $base_branch"
    
    # Check if git-tree script exists
    local git_tree_script="./scripts/git-tree/index.sh"
    if [[ ! -f "$git_tree_script" ]]; then
        log_error "Git-tree script not found at: $git_tree_script"
        exit 1
    fi
    
    # Make script executable
    chmod +x "$git_tree_script"
    
    # Generate the tree using our modern script
    # Use explicit flags to ensure consistent behavior
    # We'll let it generate to its default location first, then copy to our desired location
    # Disable interactive prompt by piping "n" to it
    if echo "n" | "$git_tree_script" --base "$base_branch" --target "$target_branch" --output "$output_file"; then
        # The script saves to scripts/git-tree/results/ directory
        local actual_output="./scripts/git-tree/results/$output_file"
        if [[ -f "$actual_output" ]]; then
            # Copy to our desired location for the adapter
            cp "$actual_output" "$output_file"
            log_success "Git-tree generated successfully and copied to: $output_file"
            return 0
        else
            log_error "Expected output file not found at: $actual_output"
            return 1
        fi
    else
        log_error "Failed to generate git-tree"
        return 1
    fi
}

# Convert git-tree markdown to GitHub PR comment format
format_for_github_comment() {
    local git_tree_file="$1"
    local output_file="$2"
    
    log_info "Formatting git-tree output for GitHub comment"
    
    if [[ ! -f "$git_tree_file" ]]; then
        log_error "Git-tree file not found: $git_tree_file"
        exit 1
    fi
    
    # Create GitHub comment with proper markers
    {
        echo "<!-- AUTO-GENERATED FILE TREE -->"
        echo "<!-- This comment will be updated automatically by the GitHub Action -->"
        echo ""
        echo "## 📁 File Tree Changes"
        echo ""
        echo "_Generated by [git-tree script](./scripts/git-tree/) for PR #${PR_NUMBER}_"
        echo ""
        
        # Include the git-tree content, but skip the header and filepath comment
        # since we're adding our own
        tail -n +3 "$git_tree_file" | grep -v "^<!-- filepath:"
        
        echo ""
        echo "---"
        echo "_🤖 This comment is automatically updated when the PR changes_"
        echo ""
        echo "<!-- END AUTO-GENERATED FILE TREE -->"
        
    } > "$output_file"
    
    log_success "GitHub comment formatted and saved to: $output_file"
}

# Main execution function
main() {
    log_info "Starting Git-Tree PR Comment Generation"
    
    # Validate environment
    validate_environment
    show_environment_info
    
    # Set up file paths
    local git_tree_output="temp_git_tree.md"
    local github_comment_output="pr_comment.md"
    
    # Generate git-tree
    if ! generate_git_tree "$GITHUB_BASE_REF" "$GITHUB_HEAD_REF" "$git_tree_output"; then
        log_error "Failed to generate git-tree"
        exit 1
    fi
    
    # Format for GitHub comment
    format_for_github_comment "$git_tree_output" "$github_comment_output"
    
    # Cleanup temporary file
    rm -f "$git_tree_output"
    
    log_success "PR comment file generated: $github_comment_output"
    log_info "Content preview:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    head -20 "$github_comment_output"
    echo "..."
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Run main function
main "$@"
